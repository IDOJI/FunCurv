}
# 최적 모델 정보와 모든 조합의 PR AUC 결과 반환
return(list(optimal_models = optimal_models, all_results = all_results))
}
# 🟩 Load data =========================================================================================================
path_data_list = "/Users/Ido/Library/CloudStorage/Dropbox/✴️DataAnalysis/FunCurv/3.Classification/1.FPCA"
path_all_data_list = list.files(path_data_list, full.names = T)
path_save = "/Volumes/ADNI_SB_SSD_NTFS_4TB_Sandisk/FunCurv/3.Classification/2.Group Penalty"
path_all_data_list
# 🟨 결과 추출 =========================================================================================================
list.files(path_save)
path_save
list.files(path_save, full.names = T)
path_save = "/Volumes/ADNI_SB_SSD_NTFS_4TB_Sandisk/FunCurv/3.Classification/2.Classification with penalized logistic regression using FPCA scores/1.Group Penalty"
# 🟨 결과 추출 =========================================================================================================
list.files(path_save, full.names = T)
# 🟨 결과 추출 =========================================================================================================
pata_all_save_list = list.files(path_save, full.names = T)
# 🟨 결과 추출 =========================================================================================================
path_all_save_list = list.files(path_save, full.names = T)
path_all_save_list
# 🟨 결과 추출 =========================================================================================================
path_all_measures = list.files(path_save, full.names = T)
path_ith_measure = path_all_measures[1]
path_ith_measure
list.files(path_ith_measure)
ith_results list.files(path_ith_measure, full.names=T)
ith_results =  list.files(path_ith_measure, full.names=T)
ith_results
path_ith_results = list.files(path_ith_measure, full.names=T)
seq(path_ith_results)
j=1
# j=1
ij_result = readRDS(path_ith_results[j])
ij_result$optimal_models
x = ij_result$optimal_models[[1]]
x$best_model
x$best_pr_auc
path_ith_results
ij_PRAUC = lapply(ij_result$optimal_models, function(x){
# x = ij_result$optimal_models[[1]]
return(x$best_pr_auc)
}) %>% setNames(names(ij_result$optimal_models))
ij_PRAUC
basename(path_ith_results)
tools::file_path_sans_ext(basename(path_ith_results))
lapply(seq(path_ith_results), function(j){
ij_result = readRDS(path_ith_results[j])
ij_PRAUC = lapply(ij_result$optimal_models, function(x){
# x = ij_result$optimal_models[[1]]
return(x$best_pr_auc)
}) %>% setNames(names(ij_result$optimal_models))
return(ij_PRAUC)
}) %>% setNames(tools::file_path_sans_ext(basename(path_ith_results)))
ith_PRAUC = lapply(seq(path_ith_results), function(j){
ij_result = readRDS(path_ith_results[j])
ij_PRAUC = lapply(ij_result$optimal_models, function(x){
# x = ij_result$optimal_models[[1]]
return(x$best_pr_auc)
}) %>% setNames(names(ij_result$optimal_models))
return(ij_PRAUC)
}) %>% setNames(tools::file_path_sans_ext(basename(path_ith_results)))
ith_PRAUC
path_ith_measure
ath_all_measures
path_all_measures
ith_PRAUC
path_all_measures
# 🟨 PROAUC 결과 추출 =========================================================================================================
# 필요한 패키지 로드
library(readr)
library(dplyr)
library(purrr)
library(writexl)
# 각 데이터 경로 불러오기
path_all_measures <- list.files(path_save, full.names = TRUE)
# 결과를 저장할 리스트 초기화
result_list <- list()
# 각 데이터 경로에 대해 반복 수행
for (path_ith_measure in path_all_measures) {
path_ith_results <- list.files(path_ith_measure, full.names = TRUE)
ith_PRAUC <- lapply(seq(path_ith_results), function(j) {
ij_result <- readRDS(path_ith_results[j])
# 각 방법론의 PRAUC 값을 추출
ij_PRAUC <- lapply(ij_result$optimal_models, function(x) {
return(x$best_pr_auc)
}) %>% setNames(names(ij_result$optimal_models))
return(ij_PRAUC)
}) %>% setNames(tools::file_path_sans_ext(basename(path_ith_results)))
# 데이터 프레임 형태로 변환하여 결과 리스트에 추가
result_list[[basename(path_ith_measure)]] <- ith_PRAUC
}
# 결과를 합쳐 테이블 형식으로 변환
result_df <- map_dfr(names(result_list), function(dataset_name) {
data <- result_list[[dataset_name]]
df <- map_dfr(data, ~ data.frame(
Method = names(.x),
Hyperparameters = .y %>% names(),
PRAUC = unlist(.y),
check.names = FALSE
), .id = "Measure")
df$Dataset <- dataset_name
df
})
result_list$`Dementia_CN___FunImgARCWSF_Fisher Z FC`
result_list
## 🟧 최댓값만 확인  ================================================================
result_list %>% unlist %>% max
head(result_list)
## 🟧 결과 합치기 ================================================================
# 결과를 합쳐 테이블 형식으로 변환
result_df <- map_dfr(names(result_list), function(dataset_name) {
data <- result_list[[dataset_name]]
df <- map_dfr(data, ~ data.frame(
Method = names(.x),
Hyperparameters = .y %>% names(),
PRAUC = unlist(.y),
check.names = FALSE
), .id = "Measure")
df$Dataset <- dataset_name
df
})
## 🟧 결과 합치기 ================================================================
# 결과를 합쳐 테이블 형식으로 변환
result_df <- map_dfr(names(result_list), function(dataset_name) {
data <- result_list[[dataset_name]]
map_dfr(names(data), function(method) {
map_dfr(data[[method]], function(prauc, hyperparameters) {
data.frame(
Method = method,
Hyperparameters = hyperparameters,
PRAUC = prauc,
Dataset = dataset_name
)
}, .id = "Hyperparameters")
})
})
## 🟧 결과 합치기 ================================================================
# 결과를 합쳐 테이블 형식으로 변환
result_df <- map_dfr(names(result_list), function(dataset_name) {
data <- result_list[[dataset_name]]
map_dfr(names(data), function(method) {
# 각 하이퍼파라미터 조합의 PRAUC 값을 데이터프레임 형식으로 변환
tibble(
Method = method,
Hyperparameters = names(data[[method]]),
PRAUC = unlist(data[[method]]),
Dataset = dataset_name
)
})
})
# 피벗 테이블로 변환
final_table <- result_df %>%
pivot_wider(names_from = "Dataset", values_from = "PRAUC")
final_table
View(final_table)
## 🟧 결과 합치기 ================================================================
# 각 데이터셋을 개별 시트로 저장할 리스트 생성
sheets <- list()
for (dataset_name in names(result_list)) {
data <- result_list[[dataset_name]]
# 각 방법론과 하이퍼파라미터를 열로 변환하여 테이블 생성
sheet_data <- map_dfr(names(data), function(method) {
tibble(
Method = method,
Hyperparameters = names(data[[method]]),
PRAUC = unlist(data[[method]])
)
})
# 결과를 리스트에 추가하여 시트별로 저장
sheets[[dataset_name]] <- sheet_data
}
# 여러 시트를 가진 엑셀 파일로 내보내기
write_xlsx(sheets, "PRAUC_results.xlsx")
# 여러 시트를 가진 엑셀 파일로 내보내기
path_export = "/Volumes/ADNI_SB_SSD_NTFS_4TB_Sandisk/FunCurv/3.Classification/2.Classification with penalized logistic regression using FPCA scores"
write_xlsx(sheets, file.path(path_export, "PRAUC_results.xlsx"))
names(result_list)
dataset_name = names(result_list)[1]
# dataset_name = names(result_list)[1]
data <- result_list[[dataset_name]]
data
# 각 방법론과 하이퍼파라미터를 열로 변환하여 테이블 생성
sheet_data <- map_dfr(names(data), function(method) {
tibble(
Method = method,
Hyperparameters = names(data[[method]]),
PRAUC = unlist(data[[method]])
)
})
sheet_data
dataset_name
## 🟧 결과 합치기 ================================================================
# 결과를 합쳐 테이블 형식으로 변환 (데이터셋 이름을 첫 번째 열로 추가)
combined_df <- map_dfr(names(result_list), function(dataset_name) {
data <- result_list[[dataset_name]]
map_dfr(names(data), function(method) {
tibble(
Dataset = dataset_name,
Method = method,
Hyperparameters = names(data[[method]]),
PRAUC = unlist(data[[method]])
)
})
})
View(combined_df)
ij_PRAUC
x$best_model$Fold_1$predicted_responses
x$best_model$Fold_1$fitted_model
combined_df
write_xlsx(combined_df, file.path(path_export, "PRAUC_results.xlsx"))
## 🟧 결과 내보내기 ===================================================================
# 엑셀 파일 생성 및 시트 추가
wb <- createWorkbook()
addWorksheet(wb, "CombinedResults")
# 데이터프레임을 엑셀 시트에 작성
writeData(wb, "CombinedResults", combined_df)
# 각 Dataset별로 max PRAUC 행을 하이라이트
unique_datasets <- unique(combined_df$Dataset)
for (dataset_name in unique_datasets) {
# 해당 데이터셋에 해당하는 행들 필터링
dataset_rows <- which(combined_df$Dataset == dataset_name)
max_prauc_row <- dataset_rows[which.max(combined_df$PRAUC[dataset_rows])]
# max PRAUC 행에 색상 적용 (노란색)
addStyle(
wb, "CombinedResults",
style = createStyle(bgFill = "yellow"),
rows = max_prauc_row + 1, # 헤더가 있으므로 +1
cols = 1:ncol(combined_df),
gridExpand = TRUE
)
}
# 엑셀 파일 저장
saveWorkbook(wb, "PRAUC_results_combined_highlighted.xlsx", overwrite = TRUE)
# 엑셀 파일 저장
saveWorkbook(wb, file.path(path_export, "PRAUC_results.xlsx"), overwrite = TRUE)
## 🟧 결과 내보내기 ===================================================================
# 엑셀 파일 생성 및 시트 추가
wb <- createWorkbook()
addWorksheet(wb, "CombinedResults")
# 데이터프레임을 엑셀 시트에 작성
writeData(wb, "CombinedResults", combined_df)
# 최댓값인 PRAUC 행 찾기
max_prauc_row <- which.max(combined_df$PRAUC)
# max PRAUC 행에 색상 적용 (노란색)
highlight_style <- createStyle(bgFill = "yellow")
addStyle(
wb, "CombinedResults",
style = highlight_style,
rows = max_prauc_row + 1, # 헤더가 있으므로 +1
cols = 1:ncol(combined_df),
gridExpand = TRUE
)
# 엑셀 파일 저장
path_export <- "/Volumes/ADNI_SB_SSD_NTFS_4TB_Sandisk/FunCurv/3.Classification/2.Classification with penalized logistic regression using FPCA scores"
saveWorkbook(wb, file.path(path_export, "PRAUC_results.xlsx"), overwrite = TRUE)
x$best_model$Fold_1$fitted_model %>% names
x$best_model$Fold_1$fitted_model %>% class
x$best_model$Fold_1$predicted_responses
# 각 fold의 AUC 값을 계산
auc_values <- sapply(ij_result$best_model, function(fold) {
predicted <- fold$predicted_responses
actual <- fold$fitted_model$y  # 실제 레이블
roc_obj <- roc(actual, predicted)
auc(roc_obj)
})
auc_values
ij_result$best_model
fold=  ij_result$optimal_models$alpha_0.2_lambda_0.1$best_model[[1]]
predicted <- fold$predicted_responses
actual <- fold$fitted_model$y  # 실제 레이블
actual
predicted
# 각 fold의 AUC 값을 계산
auc_values <- sapply(ij_result$optimal_models$alpha_0.2_lambda_0.1$best_model, function(fold) {
predicted <- fold$predicted_responses
actual <- fold$fitted_model$y  # 실제 레이블
roc_obj <- roc(actual, predicted)
auc(roc_obj)
})
predicted <- fold$predicted_responses
predicted
length(predicted)
actual <- fold$fitted_model$y  # 실제 레이블
actual
length(actual)
fold$predicted_responses
# 각 데이터 경로에 대해 반복 수행
for (path_ith_measure in path_all_measures) {
path_ith_results <- list.files(path_ith_measure, full.names = TRUE)
ith_PRAUC <- lapply(seq(path_ith_results), function(j) {
ij_result <- readRDS(path_ith_results[j])
# 각 방법론의 PRAUC 값을 추출
ij_PRAUC <- lapply(ij_result$optimal_models, function(x) {
return(x$best_pr_auc)
}) %>% setNames(names(ij_result$optimal_models))
return(ij_PRAUC)
}) %>% setNames(tools::file_path_sans_ext(basename(path_ith_results)))
# 데이터 프레임 형태로 변환하여 결과 리스트에 추가
result_list[[basename(path_ith_measure)]] <- ith_PRAUC
}
fpca = readRDS("/Volumes/ADNI_SB_SSD_NTFS_4TB_Sandisk/FunCurv/3.Classification/1.FPCA/MCI_CN___FunImgARglobalCWSF_Fisher Z FC/fpca_scores.rds")
k=1
# k=1
kth_train = fpca$train[[k]]
kth_test = fpca$test[[k]]
fpca$rep$Fold_1
kth_results = grpreg(X = kth_train %>% filter(-RID, -DX) %>% as.matix,
y = kth_train %>% pull(DX),
group = fpca$rep[[k]],
penalty = pen,
lambda = l,
alpha = a)
## 🟩 최댓값 모형을 다시 적합해서 여러 값들 추출===========================================
a = 0.1
l = 0.174752840000768
pen = "grLasso"
# k=1
kth_train = fpca$train[[k]]
kth_test = fpca$test[[k]]
kth_results = grpreg(X = kth_train %>% filter(-RID, -DX) %>% as.matix,
y = kth_train %>% pull(DX),
group = fpca$rep[[k]],
penalty = pen,
lambda = l,
alpha = a)
kth_results = grpreg(X = kth_train %>% filter(-RID, -DX) %>% as.matrix,
y = kth_train %>% pull(DX),
group = fpca$rep[[k]],
penalty = pen,
lambda = l,
alpha = a)
kth_results = grpreg(X = kth_train %>% dplyr::filter(-RID, -DX) %>% as.matrix,
y = kth_train %>% pull(DX),
group = fpca$rep[[k]],
penalty = pen,
lambda = l,
alpha = a)
kth_results = grpreg(X = kth_train %>% dplyr::select(-RID, -DX) %>% as.matrix,
y = kth_train %>% pull(DX),
group = fpca$rep[[k]],
penalty = pen,
lambda = l,
alpha = a)
kth_train %>% pull(DX)
## 🟩 최댓값 모형을 다시 적합해서 여러 값들 추출===========================================
set_label <- function(vector) {
# "AD"가 존재하면, "AD"를 1로, 나머지를 0으로 설정
if ("Dementia" %in% vector) {
return(ifelse(vector == "Dementia", 1, 0))
}
# "AD"가 없고 "MCI"가 존재하면, "MCI"를 1로, 나머지를 0으로 설정
if ("MCI" %in% vector) {
return(ifelse(vector == "MCI", 1, 0))
}
# "AD"와 "MCI"가 모두 없으면, 모든 값을 0으로 설정
return(rep(0, length(vector)))
}
kth_results = grpreg(X = kth_train %>% dplyr::select(-RID, -DX) %>% as.matrix,
y = kth_train %>% pull(DX),
group = fpca$rep[[k]],
penalty = pen,
lambda = l,
alpha = a)
kth_results = grpreg(X = kth_train %>% dplyr::select(-RID, -DX) %>% as.matrix,
y = kth_train %>% pull(DX) %>% set_label,
group = fpca$rep[[k]],
penalty = pen,
lambda = l,
alpha = a)
## 🟩 최댓값 모형을 다시 적합해서 여러 값들 추출===========================================
set_label <- function(vector) {
# "AD"가 존재하면, "AD"를 1로, 나머지를 0으로 설정
if ("Dementia" %in% vector) {
return(ifelse(vector == "Dementia", 1, 0))
}
# "AD"가 없고 "MCI"가 존재하면, "MCI"를 1로, 나머지를 0으로 설정
if ("MCI" %in% vector) {
return(ifelse(vector == "MCI", 1, 0))
}
# "AD"와 "MCI"가 모두 없으면, 모든 값을 0으로 설정
return(rep(0, length(vector)))
}
a = 0.1
l = 0.174752840000768
pen = "grLasso"
# 필요한 패키지 로드
library(dplyr)
library(grpreg)
library(pROC)  # AUC 계산을 위해 pROC 패키지 사용
library(caret) # 민감도, 특이도, 정확도 계산을 위해 caret 패키지 사용
# 결과를 저장할 리스트 초기화
results_list <- list()
# 각 fold에 대해 반복 수행
for (k in seq_along(fpca$train)) {
# k번째 fold의 train/test 데이터 설정
kth_train <- fpca$train[[k]]
kth_test <- fpca$test[[k]]
# 모델 학습
kth_results <- grpreg(
X = kth_train %>% dplyr::select(-RID, -DX) %>% as.matrix,
y = kth_train %>% pull(DX) %>% set_label,
group = fpca$rep[[k]],
penalty = pen,
lambda = l,
alpha = a
)
# 예측 수행
predictions <- predict(kth_results, newx = kth_test %>% dplyr::select(-RID, -DX) %>% as.matrix, type = "response")
actuals <- kth_test %>% pull(DX) %>% set_label
# ROC 및 AUC 계산
roc_obj <- roc(actuals, predictions)
auc_value <- auc(roc_obj)
# 이진 예측 (임계값 0.5 적용)
predicted_class <- ifelse(predictions > 0.5, 1, 0)
# 혼동 행렬 생성
confusion_matrix <- confusionMatrix(
factor(predicted_class, levels = c(0, 1)),
factor(actuals, levels = c(0, 1))
)
# 민감도, 특이도, 정확도 추출
sensitivity <- confusion_matrix$byClass["Sensitivity"]
specificity <- confusion_matrix$byClass["Specificity"]
accuracy <- confusion_matrix$overall["Accuracy"]
# fold 결과 저장
results_list[[k]] <- list(
AUC = auc_value,
Sensitivity = sensitivity,
Specificity = specificity,
Accuracy = accuracy
)
}
# 모델 학습
kth_results <- grpreg(
X = kth_train %>% dplyr::select(-RID, -DX) %>% as.matrix,
y = kth_train %>% pull(DX) %>% set_label,
group = fpca$rep[[k]],
penalty = pen,
lambda = l,
alpha = a
)
# 예측 수행
predictions <- predict(kth_results, newx = kth_test %>% dplyr::select(-RID, -DX) %>% as.matrix, type = "response")
?grpreg
predictions <- predict(kth_results, kth_test %>% dplyr::select(-RID, -DX) %>% as.matrix, type = "response")
actuals <- kth_test %>% pull(DX) %>% set_label
actuals
# ROC 및 AUC 계산
roc_obj <- roc(actuals, predictions)
auc_value <- auc(roc_obj)
auc_value
# 이진 예측 (임계값 0.5 적용)
predicted_class <- ifelse(predictions > 0.5, 1, 0)
predicted_class
# 혼동 행렬 생성
confusion_matrix <- confusionMatrix(
factor(predicted_class, levels = c(0, 1)),
factor(actuals, levels = c(0, 1))
)
# 민감도, 특이도, 정확도 추출
sensitivity <- confusion_matrix$byClass["Sensitivity"]
specificity <- confusion_matrix$byClass["Specificity"]
accuracy <- confusion_matrix$overall["Accuracy"]
# 각 fold에 대해 반복 수행
for (k in seq_along(fpca$train)) {
# k번째 fold의 train/test 데이터 설정
kth_train <- fpca$train[[k]]
kth_test <- fpca$test[[k]]
# 모델 학습
kth_results <- grpreg(
X = kth_train %>% dplyr::select(-RID, -DX) %>% as.matrix,
y = kth_train %>% pull(DX) %>% set_label,
group = fpca$rep[[k]],
penalty = pen,
lambda = l,
alpha = a
)
predictions <- predict(kth_results, kth_test %>% dplyr::select(-RID, -DX) %>% as.matrix, type = "response")
actuals <- kth_test %>% pull(DX) %>% set_label
# ROC 및 AUC 계산
roc_obj <- roc(actuals, predictions)
auc_value <- auc(roc_obj)
# 이진 예측 (임계값 0.5 적용)
predicted_class <- ifelse(predictions > 0.5, 1, 0)
# 혼동 행렬 생성
confusion_matrix <- confusionMatrix(
factor(predicted_class, levels = c(0, 1)),
factor(actuals, levels = c(0, 1))
)
# 민감도, 특이도, 정확도 추출
sensitivity <- confusion_matrix$byClass["Sensitivity"]
specificity <- confusion_matrix$byClass["Specificity"]
accuracy <- confusion_matrix$overall["Accuracy"]
# fold 결과 저장
results_list[[k]] <- list(
AUC = auc_value,
Sensitivity = sensitivity,
Specificity = specificity,
Accuracy = accuracy
)
}
# fold별 결과를 데이터프레임으로 변환 후 평균 계산
results_df <- do.call(rbind, results_list) %>% as.data.frame()
average_results <- colMeans(results_df, na.rm = TRUE)
# fold별 결과를 데이터프레임으로 변환 후 평균 계산
results_df <- do.call(rbind, results_list) %>% as.data.frame()
# 데이터프레임의 모든 열을 numeric 타입으로 변환
results_df <- results_df %>% mutate(across(everything(), as.numeric))
# 각 메트릭의 평균값 계산
average_results <- colMeans(results_df, na.rm = TRUE)
# 최종 결과 출력
average_results
