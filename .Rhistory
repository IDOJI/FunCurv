#   ith_FC_Curves = ith_Sampled_Data$FC_Curves
#
#
#   # Smoothing
#   ith_Smoothing_Results = lapply(seq_along(ith_FC_Curves), function(k){
#
#     kth_Region = ith_FC_Curves[[k]]
#
#     kth_x = kth_Region[,1]
#
#     FDA___Smoothing(Bspline = list(y = kth_Region[,-1],
#                                    x = kth_x,
#                                    range_vals = c(min(kth_x), max(kth_x)),
#                                    nbasis = NULL,
#                                    norder = 4,
#                                    breaks = kth_x,
#                                    labmdas =  exp(seq(-5, -4, 0.1)),
#                                    m_int2Lfd = 2,
#                                    argvals = kth_x),
#                     best.criterion = "gcv",
#                     path_Export = paste0(ith_path_save, "/Smoothed FC Curves using Bspline"),
#                     file.name = paste0(fit_length(k, 3), "_", names(ith_FC_Curves)[k]))
#
#
#   }) %>% setNames(names(ith_FC_Curves))
#
#   # Save Smoothed Data
#   saveRDS(ith_Smoothing_Results, paste0(ith_path_save, "/Smoothed FC Curves using Bspline.rds"))
# }
FC_Curves = Sampled_Data$FC_Curves
path_Export = paste0(path_save, "/", Sampled_Data$save_folder_name)
Smoothed_Data.list = lapply(seq_along(Sampled_Data$FC_Curves), function(k){
kth_Region = FC_Curves[[k]]
kth_x = kth_Region[,1]
FDA___Smoothing(Bspline = list(y = kth_Region[,-1],
x = kth_x,
range_vals = c(min(kth_x), max(kth_x)),
nbasis = NULL,
norder = 4,
breaks = kth_x,
labmdas =  exp(seq(-5, -4, 0.1)),
m_int2Lfd = 2,
argvals = kth_x),
best.criterion = "gcv",
path_Export = paste0(path_Export , "/Smoothed FC Curves using Bspline"),
file.name = paste0(fit_length(k, 3), "_", names(ith_FC_Curves)[k]))
}) %>% setNames(names(Sampled_Data$FC_Curves))
tictoc::toc()
return()
}
cat("\n", crayon::green("Exporting"), crayon::bgRed("Smoothed Data"), crayon::green("is done!"),"\n")
## 🟧 Smoothing using Bspline ====================================================================
Smoothing_by_Bspline = function(Sampled_Data, path_save){
# ✅ Load path of the sampled data list --------------------------------------------------------
# Folders = list.files(path_save, full.names = T)
# path_Sampled_Data_List = sapply(Folders, function(y){
#   list.files(y, full.names=T, pattern = "Sampled Data.rds")
# }) %>% unname
# ✅ Smoothing --------------------------------------------------------
tictoc::tic()
# for(i in seq_along(path_Sampled_Data_List)){
#   # ith save_path
#   ith_path_save = Folders[i]
#
#   # ith path
#   ith_path_Sampled_Data = path_Sampled_Data_List[i]
#
#   # ith Sampled Data
#   ith_Sampled_Data = readRDS(ith_path_Sampled_Data)
#
#   # Demographics
#   ith_Demo = ith_Sampled_Data$Demographics
#
#   # FC curves
#   ith_FC_Curves = ith_Sampled_Data$FC_Curves
#
#
#   # Smoothing
#   ith_Smoothing_Results = lapply(seq_along(ith_FC_Curves), function(k){
#
#     kth_Region = ith_FC_Curves[[k]]
#
#     kth_x = kth_Region[,1]
#
#     FDA___Smoothing(Bspline = list(y = kth_Region[,-1],
#                                    x = kth_x,
#                                    range_vals = c(min(kth_x), max(kth_x)),
#                                    nbasis = NULL,
#                                    norder = 4,
#                                    breaks = kth_x,
#                                    labmdas =  exp(seq(-5, -4, 0.1)),
#                                    m_int2Lfd = 2,
#                                    argvals = kth_x),
#                     best.criterion = "gcv",
#                     path_Export = paste0(ith_path_save, "/Smoothed FC Curves using Bspline"),
#                     file.name = paste0(fit_length(k, 3), "_", names(ith_FC_Curves)[k]))
#
#
#   }) %>% setNames(names(ith_FC_Curves))
#
#   # Save Smoothed Data
#   saveRDS(ith_Smoothing_Results, paste0(ith_path_save, "/Smoothed FC Curves using Bspline.rds"))
# }
FC_Curves = Sampled_Data$FC_Curves
path_Export = paste0(path_save, "/", Sampled_Data$save_folder_name)
Smoothed_Data.list = lapply(seq_along(Sampled_Data$FC_Curves), function(k){
kth_Region = FC_Curves[[k]]
kth_x = kth_Region[,1]
FDA___Smoothing(Bspline = list(y = kth_Region[,-1],
x = kth_x,
range_vals = c(min(kth_x), max(kth_x)),
nbasis = NULL,
norder = 4,
breaks = kth_x,
labmdas =  exp(seq(-5, -4, 0.1)),
m_int2Lfd = 2,
argvals = kth_x),
best.criterion = "gcv",
path_Export = paste0(path_Export , "/Smoothed FC Curves using Bspline"),
file.name = paste0(fit_length(k, 3), "_", names(ith_FC_Curves)[k]))
}) %>% setNames(names(Sampled_Data$FC_Curves))
tictoc::toc()
cat("\n", crayon::green("Exporting"), crayon::bgRed("Smoothed Data"), crayon::green("is done!"),"\n")
return(Smoothed_Data.list)
}
## 🟧 Smoothing using Bspline ====================================================================
Smoothing_by_Bspline = function(Sampled_Data, path_save){
# ✅ Load path of the sampled data list --------------------------------------------------------
# Folders = list.files(path_save, full.names = T)
# path_Sampled_Data_List = sapply(Folders, function(y){
#   list.files(y, full.names=T, pattern = "Sampled Data.rds")
# }) %>% unname
# ✅ Smoothing --------------------------------------------------------
tictoc::tic()
# for(i in seq_along(path_Sampled_Data_List)){
#   # ith save_path
#   ith_path_save = Folders[i]
#
#   # ith path
#   ith_path_Sampled_Data = path_Sampled_Data_List[i]
#
#   # ith Sampled Data
#   ith_Sampled_Data = readRDS(ith_path_Sampled_Data)
#
#   # Demographics
#   ith_Demo = ith_Sampled_Data$Demographics
#
#   # FC curves
#   ith_FC_Curves = ith_Sampled_Data$FC_Curves
#
#
#   # Smoothing
#   ith_Smoothing_Results = lapply(seq_along(ith_FC_Curves), function(k){
#
#     kth_Region = ith_FC_Curves[[k]]
#
#     kth_x = kth_Region[,1]
#
#     FDA___Smoothing(Bspline = list(y = kth_Region[,-1],
#                                    x = kth_x,
#                                    range_vals = c(min(kth_x), max(kth_x)),
#                                    nbasis = NULL,
#                                    norder = 4,
#                                    breaks = kth_x,
#                                    labmdas =  exp(seq(-5, -4, 0.1)),
#                                    m_int2Lfd = 2,
#                                    argvals = kth_x),
#                     best.criterion = "gcv",
#                     path_Export = paste0(ith_path_save, "/Smoothed FC Curves using Bspline"),
#                     file.name = paste0(fit_length(k, 3), "_", names(ith_FC_Curves)[k]))
#
#
#   }) %>% setNames(names(ith_FC_Curves))
#
#   # Save Smoothed Data
#   saveRDS(ith_Smoothing_Results, paste0(ith_path_save, "/Smoothed FC Curves using Bspline.rds"))
# }
FC_Curves = Sampled_Data$FC_Curves
path_Export = paste0(path_save, "/", Sampled_Data$save_folder_name)
Smoothed_Data.list = lapply(seq_along(Sampled_Data$FC_Curves), function(k){
kth_Region = FC_Curves[[k]]
kth_x = kth_Region[,1]
FDA___Smoothing(Bspline = list(y = kth_Region[,-1],
x = kth_x,
range_vals = c(min(kth_x), max(kth_x)),
nbasis = NULL,
norder = 4,
breaks = kth_x,
labmdas =  exp(seq(-5, -4, 0.1)),
m_int2Lfd = 2,
argvals = kth_x),
best.criterion = "gcv",
path_Export = paste0(path_Export , "/Smoothed FC Curves using Bspline"),
file.name = paste0(fit_length(k, 3), "_", names(ith_FC_Curves)[k]),
save_rds = F)
}) %>% setNames(names(Sampled_Data$FC_Curves))
tictoc::toc()
cat("\n", crayon::green("Exporting"), crayon::bgRed("Smoothed Data"), crayon::green("is done!"),"\n")
return(Smoothed_Data.list)
}
## 🟧 Smoothing using Bspline ====================================================================
Smoothing_by_Bspline = function(Sampled_Data, path_save){
# ✅ Load path of the sampled data list --------------------------------------------------------
# Folders = list.files(path_save, full.names = T)
# path_Sampled_Data_List = sapply(Folders, function(y){
#   list.files(y, full.names=T, pattern = "Sampled Data.rds")
# }) %>% unname
# ✅ Smoothing --------------------------------------------------------
tictoc::tic()
# for(i in seq_along(path_Sampled_Data_List)){
#   # ith save_path
#   ith_path_save = Folders[i]
#
#   # ith path
#   ith_path_Sampled_Data = path_Sampled_Data_List[i]
#
#   # ith Sampled Data
#   ith_Sampled_Data = readRDS(ith_path_Sampled_Data)
#
#   # Demographics
#   ith_Demo = ith_Sampled_Data$Demographics
#
#   # FC curves
#   ith_FC_Curves = ith_Sampled_Data$FC_Curves
#
#
#   # Smoothing
#   ith_Smoothing_Results = lapply(seq_along(ith_FC_Curves), function(k){
#
#     kth_Region = ith_FC_Curves[[k]]
#
#     kth_x = kth_Region[,1]
#
#     FDA___Smoothing(Bspline = list(y = kth_Region[,-1],
#                                    x = kth_x,
#                                    range_vals = c(min(kth_x), max(kth_x)),
#                                    nbasis = NULL,
#                                    norder = 4,
#                                    breaks = kth_x,
#                                    labmdas =  exp(seq(-5, -4, 0.1)),
#                                    m_int2Lfd = 2,
#                                    argvals = kth_x),
#                     best.criterion = "gcv",
#                     path_Export = paste0(ith_path_save, "/Smoothed FC Curves using Bspline"),
#                     file.name = paste0(fit_length(k, 3), "_", names(ith_FC_Curves)[k]))
#
#
#   }) %>% setNames(names(ith_FC_Curves))
#
#   # Save Smoothed Data
#   saveRDS(ith_Smoothing_Results, paste0(ith_path_save, "/Smoothed FC Curves using Bspline.rds"))
# }
FC_Curves = Sampled_Data$FC_Curves
path_Export = paste0(path_save, "/", Sampled_Data$save_folder_name)
Smoothed_Data.list = lapply(seq_along(Sampled_Data$FC_Curves), function(k){
kth_Region = FC_Curves[[k]]
kth_x = kth_Region[,1]
FDA___Smoothing(Bspline = list(y = kth_Region[,-1],
x = kth_x,
range_vals = c(min(kth_x), max(kth_x)),
nbasis = NULL,
norder = 4,
breaks = kth_x,
labmdas =  exp(seq(-5, -4, 0.1)),
m_int2Lfd = 2,
argvals = kth_x),
best.criterion = "gcv",
path_Export = paste0(path_Export , "/Smoothed FC Curves using Bspline"),
file.name = paste0(fit_length(k, 3), "_", names(ith_FC_Curves)[k]),
save_rds = F)
}) %>% setNames(names(Sampled_Data$FC_Curves))
tictoc::toc()
cat("\n", crayon::green("Exporting"), crayon::bgRed("Smoothed Data"), crayon::green("is done!"),"\n")
return(Smoothed_Data.list)
}
path_save
# ✅ Smoothing by Bspline --------------------------------------------------------------------
Smoothed_Data = Smoothing_by_Bspline(Sampled_Data, path_save)
FDA___Smoothing___Bspline = function(Bspline, best.criterion = "gcv", path_Export=NULL, file.name=NULL, save_rds=T, save_plot=T){
# 🟥0.Input ########################################################################
# Bspline = list(y = y,
#                x = x,
#                range_vals = NULL,
#                nbasis = NULL,
#                norder = NULL,
#                breaks = NULL,
#                labmdas = NULL,
#                m_int2Lfd = NULL,
#                argvals = NULL)
## 🟨 y & x ====================================================================
y = Bspline$y
x = Bspline$x
## 🟨 range_vals ====================================================================
range_vals = Bspline$range_vals
if(is.null(range_vals)){
range_vals = c(min(x), max(x))
}
# rangeval = c(1,length(y))
## 🟨 nbasis ====================================================================
nbasis = Bspline$nbasis
## 🟨 norder ====================================================================
norder = Bspline$norder
if(is.null(norder)){
norder = 4
}
## 🟨 breaks ====================================================================
# break 오류가 나면 중복값 있는지 확인
# breaks = c(Bspline$breaks[1], seq(7,10, 0.1), Bspline$breaks[-1])
breaks = Bspline$breaks
if(is.null(breaks)){
if(is.null(x)){
# breaks =
# knots = seq(1, length(y), length.out = jth_length.out)
}else{
breaks = x
}
}
## 🟨 lambdas ====================================================================
lambdas = Bspline$labmdas
if(is.null(lambdas)){
lambdas = exp(-100:100)
}
## 🟨 m_int2Lfd ====================================================================
m_int2Lfd = Bspline$m_int2Lfd
if(is.null(m_int2Lfd)){
m_int2Lfd = 2 # Curvature : the rate of change of slope
}
## 🟨 argvals ====================================================================
argvals = Bspline$argvals
if(is.null(argvals)){
argvals = 1:(dim(y)[1])
}
# 🟥1) Basis Object ########################################################################
basis_obj = fda::create.bspline.basis(rangeval = range_vals,
# nbasis = nbasis,
norder = norder,
breaks = breaks %>% unname %>% as.numeric)
# eval_basis = eval.basis(evalarg = seq(range_vals[1], range_vals[2], by = 0.01), basisobj = basis_obj)
# matplot(x = seq(range_vals[1], range_vals[2], by = 0.01), y = eval_basis, type = "l")
# 🟥2) Functional Data Object & Smoothing ########################################################################
if(is.null(m_int2Lfd)){
## 🟨 non penalty ====================================================================
fd_par_obj = fda::fdPar(fdobj = basis_obj)
smoothing = fda::smooth.basis(argvals = breaks, y = y, fdParobj = fd_par_obj)
best_lambda = NULL
}else{
## 🟨 mean gcv from all curves ====================================================================
gcv = sapply(lambdas, function(ith_lambda){
tryCatch({
fd_par_obj = fda:::fdPar(fdobj = basis_obj,
Lfdobj = int2Lfd(m_int2Lfd),
lambda = ith_lambda)
# smoothing = fda::smooth.basis(argvals = breaks, y = y, fdParobj = fd_par_obj)
smoothing = fda::smooth.basis(argvals = argvals, y = y, fdParobj = fd_par_obj)
return(mean(smoothing$gcv)) # mean gcv
}, error = function(e) {
return(NA)
})
})
if(is.na(gcv) %>% sum == length(gcv)){
stop("All lambdas are error!")
}
## 🟨 Best Smoothing ====================================================================
best_ind = which.min(gcv)
best_lambda = lambdas[best_ind]
fd_par_obj = fda::fdPar(fdobj = basis_obj,
Lfdobj = int2Lfd(m_int2Lfd),
lambda = best_lambda)
smoothing = fda::smooth.basis(argvals = argvals,
y = y,
fdParobj = fd_par_obj)
# plot(smoothing)
}
Results = list(smoothing = smoothing, best_lambda = best_lambda)
# 🟥3) Plotting & Exporting data ########################################################################
if(!is.null(path_Export)){
## 🟨 dir ====================================================================
fs::dir_create(path_Export, recurse = T)
## 🟨 plot ====================================================================
if(save_plot){
png(filename = paste0(path_Export, "/", file.name, ".png"), bg = "white", width = 5000, height = 1000)
par(mfrow=c(1,3))
# gcv
plot(gcv, main = "gcv with best index")
abline(v=best_ind, col = 'red')
# matplot
matplot(x=x, y=y, type= "l", main = paste0("Raw Signals : ", file.name))
# smoothing
plot(smoothing, main = paste0("Smoothing : ", "lambda=", round(best_lambda, 4)))
dev.off()
}
## 🟨 Data Saving ====================================================================
if(save_rds){
saveRDS(Results, file = paste0(path_Export, "/", file.name, ".rds"))
}
cat("\n", crayon::red(file.name), crayon::green("is done!"), "\n")
}
return(Results)
}
FDA___Smoothing = function(Bspline=NULL, Fourier=NULL, best.criterion = "gcv", path_Export=NULL, file.name=NULL, save_rds=T, save_plot=T){
# 🟥 path ##########################################################################
fs::dir_create(path_Export, recurse = T)
# 🟥 Smoothing ##########################################################################
## 🟨 Bspline ==========================================================================
if(!is.null(Bspline)){
tictoc::tic()
Results =  FDA___Smoothing___Bspline(Bspline, best.criterion, path_Export, file.name, save_rds, save_plot)
tictoc::toc()
## 🟨 Fourier ==========================================================================
}else if(!is.null(Fourier)){
tictoc::tic()
Results = FDA___Smoothing___Fourier(Fourier, best.criterion, path_Export, file.name, save_rds, save_plot)
tictoc::toc()
}
return(Results)
}
## 🟧 Smoothing using Bspline ====================================================================
Smoothing_by_Bspline = function(Sampled_Data, path_save){
# ✅ Load path of the sampled data list --------------------------------------------------------
# Folders = list.files(path_save, full.names = T)
# path_Sampled_Data_List = sapply(Folders, function(y){
#   list.files(y, full.names=T, pattern = "Sampled Data.rds")
# }) %>% unname
# ✅ Smoothing --------------------------------------------------------
tictoc::tic()
# for(i in seq_along(path_Sampled_Data_List)){
#   # ith save_path
#   ith_path_save = Folders[i]
#
#   # ith path
#   ith_path_Sampled_Data = path_Sampled_Data_List[i]
#
#   # ith Sampled Data
#   ith_Sampled_Data = readRDS(ith_path_Sampled_Data)
#
#   # Demographics
#   ith_Demo = ith_Sampled_Data$Demographics
#
#   # FC curves
#   ith_FC_Curves = ith_Sampled_Data$FC_Curves
#
#
#   # Smoothing
#   ith_Smoothing_Results = lapply(seq_along(ith_FC_Curves), function(k){
#
#     kth_Region = ith_FC_Curves[[k]]
#
#     kth_x = kth_Region[,1]
#
#     FDA___Smoothing(Bspline = list(y = kth_Region[,-1],
#                                    x = kth_x,
#                                    range_vals = c(min(kth_x), max(kth_x)),
#                                    nbasis = NULL,
#                                    norder = 4,
#                                    breaks = kth_x,
#                                    labmdas =  exp(seq(-5, -4, 0.1)),
#                                    m_int2Lfd = 2,
#                                    argvals = kth_x),
#                     best.criterion = "gcv",
#                     path_Export = paste0(ith_path_save, "/Smoothed FC Curves using Bspline"),
#                     file.name = paste0(fit_length(k, 3), "_", names(ith_FC_Curves)[k]))
#
#
#   }) %>% setNames(names(ith_FC_Curves))
#
#   # Save Smoothed Data
#   saveRDS(ith_Smoothing_Results, paste0(ith_path_save, "/Smoothed FC Curves using Bspline.rds"))
# }
FC_Curves = Sampled_Data$FC_Curves
path_Export = paste0(path_save, "/", Sampled_Data$save_folder_name)
Smoothed_Data.list = lapply(seq_along(Sampled_Data$FC_Curves), function(k){
kth_Region = FC_Curves[[k]]
kth_x = kth_Region[,1]
FDA___Smoothing(Bspline = list(y = kth_Region[,-1],
x = kth_x,
range_vals = c(min(kth_x), max(kth_x)),
nbasis = NULL,
norder = 4,
breaks = kth_x,
labmdas =  exp(seq(-5, -4, 0.1)),
m_int2Lfd = 2,
argvals = kth_x),
best.criterion = "gcv",
path_Export = paste0(path_Export , "/Smoothed FC Curves using Bspline"),
file.name = paste0(fit_length(k, 3), "_", names(ith_FC_Curves)[k]),
save_rds = F,
save_plot = F)
}) %>% setNames(names(Sampled_Data$FC_Curves))
tictoc::toc()
cat("\n", crayon::green("Exporting"), crayon::bgRed("Smoothed Data"), crayon::green("is done!"),"\n")
return(Smoothed_Data.list)
}
# ✅ Smoothing by Bspline --------------------------------------------------------------------
Smoothed_Data = Smoothing_by_Bspline(Sampled_Data, path_save)
# ✅ Smoothing by Bspline --------------------------------------------------------------------
path_Export = paste0(path_save,"/", Sampled_Data$save_folder_name)
Smoothed_Data = Smoothing_by_Bspline(Sampled_Data, path_Export)
Smoothed_Data$Precentral_L %>% class
Smoothed_Data
cutoff= 0.5
class(Smoothed_Data)
names(Smoothed_Data)
length(Smoothed_Data)
Smoothed_Data$Precentral_L$smoothing %>% class
#### ✅ Smoothing results ==============================================================================
path_Folders = list.files(path_save, full.names=T)
path_Smoothed = sapply(path_Folders, function(y){
list.files(y, pattern = "Smoothed FC Curves using Bspline.rds", full.names = T)
}) %>% unname
ith_Smoothed = readRDS(path_Smoothed[1])
path_Smoothed
Smoothed_Results = Smoothed_Data
